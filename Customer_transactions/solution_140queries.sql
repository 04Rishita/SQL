
1--Get all transactions with customer and product details
select t.transaction_id,c.customer_Id,c.DOB,c.Gender,p.prod_cat,p.prod_subcat,t.Qty,t.total_amt,t.Store_type from transactions t
join customer c on t.cust_id=c.customer_Id join prod_cat_info p on t.prod_subcat_code=p.prod_sub_cat_code and t.prod_cat_code=p.prod_cat_code;

2--Find total revenue generated per product category
select p.prod_cat,sum(t.total_amt) as total_revenue from transactions t join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and 
p.prod_sub_cat_code=t.prod_subcat_code 
group by p.prod_cat 
order by total_revenue desc;

3--Get top 5 customers by total spending
select c.customer_Id,c.Gender, sum(t.total_amt) as total_spent from transactions t join customer c on c.customer_Id=t.cust_id 
group by c.customer_Id,c.Gender
order by total_spent desc
limit 5;

4--Find number of transactions by gender
select c.Gender,count(t.transaction_id) as total_transac
from transactions t
join customer c
on t.cust_id=c.customer_Id
group by c.Gender;

5--Get average spending per city
select c.city_code,avg(t.total_amt)as total_spent from transactions t join customer c on c.customer_Id=t.cust_id 
group by c.city_code 
order by total_spent;

6--Most popular product subcategory by gender
select c.Gender,p.prod_subcat,count(*) as purchases  from transactions t join customer c on t.cust_id=c.customer_Id 
join prod_cat_info p on t.prod_subcat_code=p.prod_sub_cat_code and t.prod_cat_code = p.prod_cat_code
group by c.Gender,p.prod_subcat
order by purchases;

7--Revenue contribution by store type
select Store_type,sum(total_amt) as total_revenue,
round(100.0* sum(total_amt)/(select sum(total_amt) from transactions),2) as revenue_perperson from transactions 
group by Store_type
order by total_revenue;

8--Average quantity purchased per product category
select p.prod_cat,avg(t.Qty) as avrage_quantity from transactions t join prod_cat_info p on t.prod_subcat_code=p.prod_sub_cat_code 
and t.prod_cat_code=p.prod_cat_code
group by p.prod_cat
order by avrage_quantity;

9--Find how much revenue is generated by male and female customers for each product category.
select p.prod_cat,
sum(case when c.Gender='M' then t.total_amt else 0 end) as male_revenue,
sum(case when c.Gender='F' then t.total_amt else 0 end) as female_revenue
from transactions t
join customer c on
c.customer_Id=t.cust_id
join prod_cat_info p
on t.prod_subcat_code=p.prod_sub_cat_code
and t.prod_cat_code=p.prod_cat_code
group by p.prod_cat
order by male_revenue,female_revenue;

10--Count how many transactions are above ₹1000 (high value) and how many are below ₹1000 (low value).
select total_amt ,
case 
when t.total_amt >= 1000 then 'high value'
when t.total_amt <= 1000 then 'low value'
else 'value not exists' end as transsction_total,
count(*) as transaction_count from transactions t
group by
case 
when t.total_amt >= 1000 then 'high value'
when t.total_amt <= 1000 then 'low value'
else 'value not exists'
end;


11--Group customers into Youth (<25), Adult (25–40), and Senior (>40), then find the average spending of each group.



12--Find how many products were sold (positive quantity) and how many were returned (negative quantity) in each product category.
select p.prod_cat,
sum(case when t.Qty>0 then t.Qty else 0 end) as total_sold,
sum(case when t.Qty<0 then abs(t.Qty) else 0 end) as total_return
from transactions t
join prod_cat_info p
on t.prod_cat_code=p.prod_cat_code and t.prod_subcat_code=p.prod_sub_cat_code
group by p.prod_cat
order by total_sold;

13--List the top 3 product categories that generated the highest revenue among female customers.
select p.prod_cat,sum(t.total_amt)as revenue from transactions t join customer c
on c.customer_Id=t.cust_id join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code
where c.Gender='F'
group by p.prod_cat
order by revenue
limit 3;

14--Calculate the average spend per customer.
select c.customer_Id,round(avg(t.total_amt),2) as avg_spend
from transactions t
join customer c on c.customer_Id=t.cust_id
group by c.customer_Id
order by avg_spend;

15--Find the top 3 transactions by amount for each store type
select * from (select t.Store_type,t.transaction_id,t.total_amt,
rank() over(partition by t.Store_type order by t.total_amt desc) as rank_in_store
from transactions t) as ranked
where  ranked.rank_in_store<=3;

16--Calculate running total of sales for each store type
select t.Store_type,t.transaction_id,t.total_amt,sum(t.total_amt)
over(partition by t.Store_type order by t.transaction_id) as running_tottal
from transactions t;

17--Find average spend per customer vs their actual spend
select c.customer_Id,sum(t.total_amt) as actual_apend,
avg(sum(t.total_amt)) as averge_spend
from transactions t
join customer c on c.customer_Id=t.cust_id
group by c.customer_Id;

18--Rank customers within each gender by total spend
select c.Gender,c.customer_id,sum(t.total_amt) as total_spend,
dense_rank() over(partition by c.Gender order by sum(t.total_amt) desc) as rankin_gender
from transactions t join customer c on c.customer_Id=t.cust_id
group by c.Gender,c.customer_id;

19--Find each product’s revenue and compare with category average
select p.prod_cat,p.prod_subcat,sum(t.total_amt) as subcat_revenue,avg(sum(t.total_amt)) over(partition by p.prod_cat ) as avg_cat_revenue
from transactions t join prod_cat_info p
on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code 
group by p.prod_cat,p.prod_subcat;

20--List the total number of customers, products, and transactions in a single column format, along with a category label.
select 'total customer' as category,count(*)  as total_count from customer
union all
select 'total products' as category,count(*) as total_count from prod_cat_info
union all
select 'total transactions' as category,count(*) as total_count from transactions;

21--Get categories with average quantity > 2
select p.prod_cat,avg(t.Qty) as average_quantity from transactions t
join prod_cat_info p on t.prod_cat_code=p.prod_cat_code and t.prod_subcat_code=p.prod_sub_cat_code
group by p.prod_cat
having avg(t.Qty) > 2;

22--Customers who made more than 10 transactions
select c.customer_Id,count(t.transaction_id) from transactions t join customer c on c.customer_Id=t.cust_id
group by c.customer_Id
having count(t.transaction_id)>=10;

23--Find out Highest spending store type
select Store_type,sum(total_amt) as total_revenue from transactions
group by Store_type
order by total_revenue desc
limit 1;

24--Find product subcategory that generated maximum revenue
select 	p.prod_subcat,sum(t.total_amt) as total_revenue from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code
group by p.prod_subcat
order by total_revenue desc
limit 1;

25--Rank customers within each store type by their total spend.
select c.customer_id,t.Store_type,sum(t.total_amt) as total_spend,
rank() over(partition by t.Store_type order by sum(t.total_amt)) as rank_in_store
from transactions t
join customer c on
c.customer_Id=t.cust_id
group by c.customer_id,t.Store_type
order by rank_in_store;

26--Find customers who purchased products from more than one category.
select c.customer_id,count(distinct p.prod_cat) as ubique_categories
from transactions t join customer c
on c.customer_Id=t.cust_id join prod_cat_info p
on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code
group by c.customer_id
having count(distinct p.prod_cat)>1;

27--Find the highest and lowest spend per product category
select p.prod_cat,max(t.total_amt) as maxminum_transac,min(t.total_amt)as minimum_transac from transactions t join prod_cat_info p
on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code
group by p.prod_cat
order by maxminum_transac desc;

28--Find customers who spent more than 5000 in total
select c.customer_id,sum(t.total_amt) as total_spend from customer c
 join transactions t on t.cust_id=c.customer_id
 group by c.customer_id
 having sum(t.total_amt)>5000;

 29--Find all transactions where category is not Books or Footwear.
 select t.transaction_id,t.total_amt,p.prod_cat from transactions t
join prod_cat_info p on t.prod_cat_code=p.prod_cat_code and t.prod_subcat_code=p.prod_sub_cat_code
where p.prod_cat not in('Books','Footwear');

30--Find store types ending with "Shop" that generated more than 50,000 revenue.
select t.Store_type,sum(t.total_amt) as total_revenue from transactions t
where t.Store_type like '%shop'
group by t.Store_type
having sum(t.total_amt)>50000;

31--Find the customer who made the most purchases in each store type
select Store_type,customer_Id,transaction_count from(
select t.Store_type,c.customer_Id,count(*) as transaction_count,rank() over(partition by t.Store_type order by count(*) desc)as ranks
from transactions t join customer c on c.customer_Id=t.cust_id 
group by t.Store_type,c.customer_Id)ranked
where ranks=1;

32--Find the top 3 product subcategories with highest revenue per store type
select Store_type,prod_subcat,total_revenue from(
select t.Store_type,p.prod_subcat,sum(t.total_amt) as total_revenue,
rank() over(partition by t.Store_type order by sum(t.total_amt)desc)as ranks from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code
group by t.Store_type,p.prod_cat) ranked
where ranks<=3;

33--Find the customers who spent more than the average customer in their store type
select customer_Id,Store_type,total_spent from(
select c.customer_Id,t.Store_type,sum(t.total_amt) as total_spent,
avg(sum(t.total_amt)) over(partition by t.Store_type)as avg_spnet 
from transactions t join customer c on
c.customer_Id=t.cust_id
 group by c.customer_Id,t.Store_type ) sub
 where total_spent > avg_spnet;

 34--Find customers who made transactions in more than 3 different store types.
 select c.customer_id,count(distinct t.Store_type) as unique_stores from transactions t
join customer c on c.customer_Id=t.cust_id group by customer_id
having count(distinct t.Store_type)>3;

35--Get the number of transactions per store type.
select Store_type,count(*) as transaction_count from transactions
group by Store_type;

36--Find all transactions where total amount > 10,000.
select transaction_id,tran_date from transactions where total_amt > 5000;

37--Find the top 5 product categories by sales amount.
select p.prod_cat,sum(t.total_amt)as total_sales from transactions t join 
prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code 
group by p.prod_cat
order by total_sales desc
limit 5;

38--Find store type with the maximum revenue.
select Store_type,sum(total_amt) as total_revenue from transactions t
group by Store_type
order by total_revenue
limit 1;

39--Find the product category with the highest average spend per transaction.
select p.prod_cat,avg(t.total_amt) as avg_spend from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code 
group by p.prod_cat
order by avg_spend
limit 1;

40--Find customers who bought from both 'Electronics' and 'Clothing' categories.
select cust_id, prod_cat from transactions t join prod_cat_info p on p.prod_cat_code=t.prod_cat_code
where p.prod_cat in('Electronics','Clothing')
group by cust_id
having count(distinct  p.prod_cat)=2;

41--Convert the date variables into valid date formats
select transaction_id,str_to_date(tran_date,'%d-%m-%Y') as converted from transactions;

42--Find year-wise transactions after converting:
select year(str_to_date(tran_date,'%d-%m-%Y'))as tran_year,
count(*) as total_transactions from transactions
group by  year(str_to_date(tran_date,'%d-%m-%Y'))
order by tran_year;

43--Find customer age from DOB
select customer_id,timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) as age from customer;

44--Find the age of each customer and classify them into groups
select customer_id,timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) as age ,
case
when timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate())< 18 then 'Minor'
when timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) between 18 and 35 then 'Young adult'
when timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) between 36 and 55 then 'Middle aged'
else 'senior citizen'
end as age_groups from customer;

45--Calculate customer lifetime (first transaction to last transaction)
select cust_id,min(str_to_date(tran_date,'%d-%m-%Y')) as first_purchase,
max(str_to_date(tran_date,'%d-%m-%Y')) as last_purchase,
timestampdiff(day,min(str_to_date(tran_date,'%d-%m-%Y')),
 max(str_to_date(tran_date,'%d-%m-%Y')))as lifetime_days
 from transactions group by cust_id;

46--Find the youngest customer who made a transaction above 5000
 select c.customer_Id,t.total_amt,c.DOB,timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) as age
 from transactions t join customer c on c.customer_Id=t.cust_id
 where t.total_amt>5000
 order by age asc
 limit 1;

 47--Find monthly revenue trend
 select str_to_date(tran_date,'%d-%m-%Y') as month,
sum(total_amt) as total_revenue from transactions 
group by str_to_date(tran_date,'%d-%m-%Y')
order by month;

48--Find the youngest customer who made a purchase in an 'e-shop'.
select c.customer_Id,c.DOB,timestampdiff(year,str_to_date(c.DOB,'%d-%m-%Y'),curdate()) as age
from customer c join transactions t
on c.customer_Id=t.cust_id where t.Store_type='e-shop'
order by age asc
limit 1;

49--Find current age of customers and tag lables for it.
select customer_id,timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) as age ,
case
when timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate())< 18 then 'Minor'
when timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) between 18 and 35 then 'Young adult'
when timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) between 36 and 55 then 'Middle aged'
else 'senior citizen'
end as age_groups from customer;

50--Find the average age of customers.
select avg(timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate())) as avg_age from customer;

51--List customers whose age is greater than 50.
select customer_id,timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) as age from customer
where timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate())<40;

52--Find the youngest and oldest customer.
select min(str_to_date(DOB,'%d-%m-%Y')) as oldest_customer,max(str_to_date(DOB,'%d-%m-%Y')) as youngest_customer from customer;


53--Find the most recent transaction date in the dataset.
select max(str_to_date(tran_date,'%d-%m-%Y')) as recent_transaction from transactions;

54--Find the customer who made the earliest transaction.
select cust_id,min(str_to_date(tran_date,'%d-%m-%Y')) as earliest_customer from transactions 
group by cust_id
order by earliest_customer asc
limit 1;

55--What is the time range of the transaction data available for analysis? Show the output in the number of days, months, and years simultaneously in different columns.
select min(str_to_date(tran_date,'%d-%m-%Y')) as first_transaction,
max(str_to_date(tran_date,'%d-%m-%Y')) as last_transaction,
timestampdiff(day,min(str_to_date(tran_date,'%d-%m-%Y')),max(str_to_date(tran_date,'%d-%m-%Y'))) as total_days,
timestampdiff(month,min(str_to_date(tran_date,'%d-%m-%Y')),max(str_to_date(tran_date,'%d-%m-%Y'))) as total_months,
timestampdiff(year,min(str_to_date(tran_date,'%d-%m-%Y')),max(str_to_date(tran_date,'%d-%m-%Y'))) as total_year
from transactions;

56--which product category does the subcateogory diy belongs to?
select prod_cat from prod_cat_info where prod_subcat='DIY' ;

57--Count the number of subcategories under each product category.
select prod_cat,count(distinct prod_subcat) sub_count from prod_cat_info
group by prod_cat
order by sub_count;

58--Which product category generated the highest total sales revenue?
select p.prod_cat,sum(t.total_amt) as total_revenue from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and t.prod_subcat_code=p.prod_sub_cat_code
group by p.prod_cat
order by total_revenue desc
limit 1;

59--For each product category, what is the average spending per transaction?
select p.prod_cat,avg(t.total_amt) as avg_spending from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_subcat_code 
group by p.prod_cat
order by avg_spending;

60--Find the top 3 subcategories with the highest number of distinct customers.
select p.prod_cat,count(distinct t.cust_id) as unique_customres from transactions t
join  prod_cat_info p on p.prod_cat_code=t.prod_subcat_code 
group by p.prod_cat
order by unique_customres;

61--Which product category has the widest range of subcategories?
select prod_cat,count(distinct prod_subcat) as unique_categories from prod_cat_info
group by prod_cat
order by unique_categories;

62--Find the most popular subcategory (by transactions) in the category "Clothing".
select p.prod_cat,count(*) as txn_count from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code 
group by p.prod_cat
order by txn_count desc
limit 1;

63--For each product category, calculate the total discount given (Actual Price – Discounted Price).
select p.prod_cat,sum(t.total_amt) as discount_price from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code 
where t.total_amt < 0
group by p.prod_cat
order by discount_price;

64--Which destination (store_type) drives the highest sales for Electronics category?
select t.Store_type,sum(t.total_amt) as total_sales from transactions t
join  prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code 
where t.Store_type='Electronics'
group by t.Store_type
order by total_sales desc
limit 1;

65--Who are the top 5 customers (customer_id) who spent the most on Clothing products?
select t.cust_id,sum(t.total_amt)as total_spnet from transactions t
join prod_cat_info p on t.prod_cat_code=p.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code 
where t.Store_type='Clothing'
group by t.cust_id
order by total_spnet asc
limit 10;

66-- Find all transactions that happened in stores whose type starts and ends with "M".
select * from transactions where Store_type like 'M%';

67--Retrieve all customers whose first name ends with "A".
select * from transactions where Store_type like '%A';

68--Find all transactions that occurred in store types whose type ends with Shop".
select * from transactions where Store_type like '%Shop';

69--Retrieve transactions that belong to store types “Flagship store”, “Online”, or “TeleShop”.
select * from transactions where Store_type in ('Flagship store','Online','Teleshop');

70--Count number of females and males from the table.
select Gender,count(*) from customer group by Gender;

71--Give Daily Revenue Trend
select tran_date,sum(total_amt)as revenue from transactions 
group by tran_date
order by tran_date;

72--Find the top 5 customers with the highest spending, using RANK().
select cust_id,sum(total_amt) as total_spnet,rank() over(order by sum(total_amt)desc) as ranks
from transactions group by cust_id order by ranks
limit 5;

73--Find the top 10 customers with the highest spending
select cust_id,sum(total_amt) as total_spent,dense_rank() over(order by sum(total_amt) desc) as ranks
from transactions group by cust_id order by ranks
limit 10;

74--Assign a unique row number to each transaction ordered by date.
select transaction_id,cust_id,str_to_date(tran_date,'%d-%m-%Y') as tran_date,
row_number() over(order by str_to_date(tran_date,'%d-%m-%Y')) as row_num
from transactions
order by row_num;

75--For each store_type, find the customer who spent the most.
select Store_type,cust_id,total_spent from (
select Store_type,cust_id,sum(total_amt) as total_spent,
rank() over(partition by Store_type order by sum(total_amt) desc )as rnk
from transactions
group by  Store_type,cust_id) as ranks
where rnk=1;

76--Find each customer’s most recent purchase.
select cust_id,transaction_id,tran_date from (
 select cust_id,transaction_id,tran_date,row_number() over(partition by cust_id order by str_to_date(tran_date,'%d-%m-%Y') desc) as rowss
from transactions) as rnnn
where rowss=1;

77--Customers who spent more than ₹50,000 in total
select cust_id,sum(total_amt) as total_spent
from transactions group by cust_id
having sum(total_amt)>5000;

78--Stores where the average transaction amount exceeds ₹2,000
select Store_type,avg(total_amt) as avg_amt from transactions
group by Store_type
having avg(total_amt) > 2000;

79--Product categories with at least 1000 items sold
select prod_cat_code,sum(Qty) as total from transactions
group by prod_cat_code
having sum(Qty) >= 1000;

80--Customers who made more than 20 transactions
select cust_id,count(transaction_id) as transactions_count from transactions
group by cust_id
having count(transaction_id) > 10;

81--Subcategories with maximum discount sales above ₹10,000
select prod_subcat_code,sum(total_amt) as discount_sales from transactions
group by prod_subcat_code
having sum(total_amt) > 10000;

82--Product subcategories where both total quantity > 500 AND total revenue > ₹50,000
select prod_subcat_code,sum(Qty) as total_qty,sum(total_amt) as total_revenue 
from transactions group by prod_subcat_code
having sum(Qty)>500 and sum(total_amt)>50000;

83--Stores where the maximum single transaction exceeded ₹1000
select Store_type,max(total_amt) as max_trans from transactions 
group by Store_type
having max(total_amt)  > 1000;

84--Customers who made at least 5 purchases but whose average spend per transaction is below ₹500
select cust_id,count(transaction_id) as txn_count,avg(total_amt) as avg_spent from transactions
group by cust_id
having count(transaction_id)>=5 and avg(total_amt) < 500;

85--Product categories that contribute to more than 10% of total revenue
select prod_cat_code,sum(total_amt) as catg_revenue from transactions group by prod_cat_code 
having sum(total_amt) > 0.10 * (select sum(total_amt) from transactions);

86--Count how many transactions had an amount greater than ₹5000
select count(*) as high_transaction from transactions where total_amt> 5000;

87--Count how many customers are male
select count(*) as male_gender from customer where Gender in ('M');

88--Count transactions that happened in the year 2014
select count(*) as transac_2014 from transactions where year(str_to_date(tran_date,'%d-%m-%Y')) =2014;

89--Count how many transactions were done in "Flagship store"
select count(*) as flagship_tran from transactions where Store_type='Flagship store';

90--Count customers who were born after the year 1990
select count(*) as customer_in_1990 from customer where year(str_to_date(DOB,'%d-%m-%Y'))>1990;

91--Count customers grouped by age group (Youth <25, Adult 25–40, Senior >40)
select 
case
when timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) < 20 then 'Youth'
when timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate()) between 25 and 40 then 'Adult'
end as age_grps ,
count(*) as customer_count
from customer
where DOB is not null
group by age_grps;


92--Count number of transactions per product category, but only where at least one unit was purchased
select prod_cat_code,count(*) as tran_count from transactions where Qty > 0
group by prod_cat_code;

93--Count number of customers by gender, but only those born after 1990
select Gender,count(*) as customer_count from customer where year(str_to_date(DOB,'%d-%m-%Y')) > 1990
group by Gender;

94--Find customers who share the same date of birth (DOB)
select c1.customer_id,c2.customer_id,c1.DOB from customer c1 join customer c2
on c1.DOB=c2.DOB and c1.customer_Id < c2.customer_Id;

95--Find pairs of transactions by the same customer on the same date
select t1.transaction_id as tran1,t2.transaction_id as tran2,t1.tran_date,t1.cust_id
from transactions t1 join transactions t2 on t1.cust_id=t2.cust_id
and str_to_date(t1.tran_date,'%d-%m-%Y') = str_to_date(t2.tran_date,'%d-%m-%Y') 
and t1.transaction_id < t2.transaction_id;

96--Find customers who live in the same city (assuming you have a City column in customer)
select c1.customer_id as cust1,c2.customer_id as cust2, c1.city_code from customer c1 join customer c2
on c1.city_code=c2.city_code and c1.customer_Id < c2.customer_Id;

97--Find transactions where one customer spent more than another customer in the same store
select t1.cust_id as cust_high, t2.cust_id as cust_low,t1.total_amt as amt_high,t2.total_amt as amt_low,t1.Store_type
from transactions t1 join transactions t2 on t1.Store_type=t2.Store_type and t1.total_amt < t2.total_amt;

98--Find the earliest and latest transaction of each customer (self-join on date)
select t1.cust_id,t1.transaction_id as first_tran,t2.transaction_id as last_tran from transactions t1 join transactions t2
on t1.cust_id=t2.cust_id where str_to_date(t1.tran_date,'%d-%m-%Y')=(select min(str_to_date(tran_date,'%d-%m-%Y')) from transactions 
where cust_id=t1.cust_id) and
str_to_date(t2.tran_date,'%d-%m-%Y')=(select max(str_to_date(tran_date,'%d-%m-%Y')) from transactions where cust_id=t1.cust_id);

99--"Find how many subcategories exist under the product category 'Books' and display their category codes along with the count."
select prod_cat_code,count(*) as book_cat_code from prod_cat_info where prod_cat='Books';

100--Find all product subcategories that belong to the category 'Electronics'.
select prod_subcat from prod_cat_info where prod_cat='Electronics';

101--Count how many unique product categories exist in the dataset.
select count(distinct prod_cat) from prod_cat_info ;

102--Find all product categories that have more than 3 subcategories.
select prod_cat,count(prod_subcat) as subcat_count from prod_cat_info group by prod_cat
having count(prod_subcat)>3;

103--List all product subcategories whose names start with the letter 'C'.
select prod_cat,prod_subcat from prod_cat_info where prod_subcat like 'C%';

104--Show the product category and subcategory codes where the category is either 'Books' or 'Clothing'.
select prod_cat_code,prod_sub_cat_code,prod_cat,prod_subcat from prod_cat_info where prod_cat in('Books','Clothing');

105--Find the total number of transactions.
select count(*) as total_transaction from transactions;

106--Find the total revenue from all transactions.
select sum(total_amt) as total_revune from transactions;

107--Find the average transaction amount per store type.
select avg(total_amt) as avg_revenue from transactions;

108--Find customers who made more than 10 transactions.
select cust_id,count(transaction_id) from transactions
group by cust_id
having count(transaction_id) > 10;

109--Find the highest single transaction amount per store type.
select Store_type,max(total_amt) as maxx from transactions group by Store_type limit 1;

110--Find the customer who spent the maximum total amount overall.
select cust_id,sum(total_amt) as total_spent from transactions
group by cust_id
order by total_spent desc;

111--Find the month with the highest total revenue.
select month(str_to_date(tran_date,'%d-%m-%Y')) as tran_month,sum(total_amt) as revenue from transactions
group by month(str_to_date(tran_date,'%d-%m-%Y'))
order by revenue desc
limit 1;

112--Find the number of transactions for each product category code.
select prod_cat_code,count(*) as total_count from transactions group by prod_cat_code;
 
113--Find customers whose average purchase amount is more than ₹5000.
select cust_id,avg(total_amt) as avgamt from transactions
group by cust_id
having avg(total_amt)>5000;

114--Find the top 3 customers by spending in each store type.
select Store_type,cust_id,total_revuen ,rnks from (
select Store_type,cust_id,sum(total_amt) as total_revuen, rank() over(partition by Store_type order by sum(total_amt)desc )as rnks
from transactions group by Store_type,cust_id) ranked
where rnks<=3;

115--Count the total number of customers.
select count(*) from customer;

116--Find the youngest customer’s DOB.
select max(str_to_date(DOB,'%d-%m-%Y')) as young from customer;

117--Find the oldest customer’s DOB
select min(str_to_date(DOB,'%d-%m-%Y')) as young from customer;

118--Find the average age of all customers.
select avg(timestampdiff(year,str_to_date(DOB,'%d-%m-%Y'),curdate())) as avg_age from customer;

119--Find customers with missing or invalid DOB values.
select * from customer where DOB is NULL OR DOB='';

120--Find customers with the same DOB.
select DOB,count(*) as countt from customer order by DOB having count(*)>1;

121--Find the top 5 youngest customers with their calculated age.
select customer_id,timestampdiff(year,str_to_date('%d-%m-%Y'),curdate()) as age from customer
order by age 
limit 5;

122--List all subcategories whose name contains 'Elect'
select prod_cat,count(distinct prod_subcat) as subcat_count from prod_cat_info
group by prod_cat
having count(distinct prod_subcat)>5;

123--List all subcategories whose name contains 'Elect'
select prod_subcat from prod_cat_info where prod_subcat like '%Elect%';

124--Find the product category that contains the subcategory 'DIY'.
select prod_cat from prod_cat_info where prod_cat='DIY';

125--Find customer details along with their transactions.
select c.customer_id,c.DOB,t.transaction_id from customer c join transactions t
on c.customer_Id=t.cust_id;

126--Get all transactions with product category and subcategory names.
select t.transaction_id,t.total_amt,p.prod_cat,p.prod_subcat from transactions t join prod_cat_info p
on t.prod_cat_code=p.prod_cat_code and t.prod_subcat_code=p.prod_sub_cat_code;

127--Retrieve each customer’s transactions along with the product categories.
select c.customer_id,t.transaction_id,t.total_amt,p.prod_cat from transactions t join customer c on t.cust_id=c.customer_Id
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code;

128--Find total spending of each customer per category.
select c.customer_id,p.prod_cat,sum(t.total_amt) as total_spent from customer c join transactions t on c.customer_Id=t.cust_id
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code;


129--Find the top 3 most popular subcategories by number of transactions.
select p.prod_subcat,count(t.transaction_id) as total_tran from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code;


130--List customers who purchased from the "Books" category.
select p.prod_subcat,count(t.transaction_id) as total_tran from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code;


131--Find average spending per store type and category.
select t.Store_type,p.prod_cat,avg(t.total_amt) as avg_spnet from transactions t
join prod_cat_info p on p.prod_cat_code=t.prod_cat_code and p.prod_sub_cat_code=t.prod_subcat_code
group by t.Store_type,p.prod_cat;

132--Show the youngest customer who has made a transaction.
select c.customer_id,timestampdiff(year,str_to_date(c.DOB,'%d-%m-%Y'),curdate()) as age, min(t.tran_date) from customer c join
transactions t on c.customer_Id=t.cust_id  group by c.customer_id
order by age 
limit 1;

133--Show customer IDs with their transaction IDs.
select c.customer_id from customer c join transactions t on c.customer_id=t.cust_id;

134--Show transaction ID with its product category.
select p.prod_cat,t.transaction_id from transactions t join prod_cat_info p on  t.prod_cat_code = p.prod_cat_code 
and t.prod_subcat_code = p.prod_sub_cat_code;

135--Show each store type with its total transactions.
select t.Store_type,count(*) as total_tran  from transactions t group by t.Store_type;

136--Show customer IDs with their total spending.
select c.customer_id,sum(t.total_amt) as totall from transactions t join customer c on c.customer_id=t.cust_id;

137--Show transaction ID, customer ID, and purchase date.
select t.transaction_id,t.cust_id,str_to_date(t.tran_date,'%d-%m-%Y') as purchase_date from transactions t;

138--Count customer from the table
select count(customer_id) from customer;

139--Find the maximum, minimum, average transaction amount, and the total number of transactions in the transactions table.
select max(total_amt),min(total_amt),avg(total_amt),count(*) from transactions;

140--Find the count of transactions for each negative quantity in the transactions table.
select Qty,count(Qty) from transactions where Qty < 0 group by Qty;
